using PortalDeFluxos.Core.BLL.Modelo;
using PortalDeFluxos.Core.BLL.Negocio;
using PortalDeFluxos.Core.BLL.Utilitario;
using PortalDeFluxos.Core.SP.Core.BaseControls;
using PortalDeFluxos.Core.Wrapper;
using PortalDeFluxos.NOTIF.BLL.Modelo;
using System;
using System.Collections.Generic;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;

namespace PortalDeFluxos.NOTIF.SP.ControlTemplates.PortalDeFluxos.NOTIF.SP
{
	public partial class ucNOTIF : CustomForm, ICustomForm
	{
		
		#region [propriedades]

		private ListaSP_NOTIF _propostaListaSP_NOTIF;
		private Control controleIbm;
        private Control controleEstruturaGt;
        private Control controleEstruturaGr;
        private Control controleEstruturaDiretor;
        private Control controleEstruturaCdr;
        private Control controleEstruturaGdr;
		
		private ListaNOTIF _propostaListaNOTIF;
	
		#endregion

		#region [Evento]

        protected void Page_Load(object sender, EventArgs e)
        {
            LoadMenu();
        }

        protected override void CreateChildControls()
        {
            base.CreateChildControls();
            EventoTratado(LoadControls, false);
        }

        #region [Click]

        protected void btnSalvar_Click(object sender, EventArgs e)
        {
			//Não modificar o evento
			//Qualquer tratativa deve ser realizada dentro do método SalvarFormulario
            Salvar(false);
        }

        protected void btnSalvarIniciar_Click(object sender, EventArgs e)
        {
			//Não modificar o evento
			//Qualquer tratativa deve ser realizada dentro do método SalvarFormulario
			Salvar(true);           
        }

        protected void btnCancelar_Click(object sender, EventArgs e)
        {
            Cancelar();
        }

        protected void btnAnexoPorEmail_Click(object sender, EventArgs e)
        {
            EnviarEmailAnexo();
        }
				
		protected void btnObterPDF_Click(object sender, EventArgs e)
        {
            EventoTratado(DownloadPDF);
        }
		
		protected void btnReiniciarFluxo_Click(object sender, EventArgs e)
        {
            ReiniciarFluxoForm();
        }

        #endregion
		
        #endregion
		
		#region [Métodos - Eventos Tratados]

		protected void LoadMenu()
		{
			List<KeyValuePair<String,String>> listaMenus = new List<KeyValuePair<String,String>>(); 
					listaMenus.Add(new KeyValuePair<String, String>("menuProposta","Proposta"));
					listaMenus.Add(new KeyValuePair<String, String>("menuNotificacoes","Gestão das Notificações"));
					listaMenus.Add(new KeyValuePair<String, String>("menuAcoes","Ações"));
					listaMenus.Add(new KeyValuePair<String, String>("menuObservacoes","Observações"));
					listaMenus.Add(new KeyValuePair<String, String>("menuAnexo", "Anexo"));
			CarregarFormulario(listaMenus,"menuProposta"," Nome Formulário ", LoadForm, LoadPermissao, SalvarFormulario);
		}

		public KeyValuePair<Boolean, String> LoadControls()
        {
			KeyValuePair<Boolean, String> retorno = new KeyValuePair<Boolean, String>(true, String.Empty);
            
			//os usercontrols do Core devem carregados neste método.
            CarregarUcAnexos(phUcAnexos);
            LoadEstruturaComercialControls();
            //LoadAnoControls();
            //LoadCustomGridProdutos();

            if (!this.IsPostBack)
            {
                LoadFormEstruturaComercialControls();
                //LoadAnoContratual();
                //LoadFormAnoControls();
                //LoadProdutos();
                //LoadFormCustomGridProdutos();
            }

            return retorno;
        }

        public KeyValuePair<Boolean,String> SalvarFormulario(Boolean reiniciarFluxo)
        {
			KeyValuePair<Boolean, String> retorno = new KeyValuePair<Boolean, String>(true, String.Empty);
			
			if (reiniciarFluxo && new ControleAnexo(controlAnexo).ObterQuaNOTIFdadeAnexos() <= 0)
				return new KeyValuePair<Boolean, String>(false, "Fluxo não pode ser iniciado se não tiver anexos."); 
			
			 LoadListaSP_NOTIF(true);
			 LoadListaSP_NOTIFFromForm();
			 SalvarListaSP_NOTIF();
			
			LoadListaNOTIF(true);
			LoadListaNOTIFFromForm();
			SalvarListaNOTIF();
		  
			
            AcaoFluxo(_propostaListaSP_NOTIF, reiniciarFluxo);

			return retorno;
        }
		
		public KeyValuePair<Boolean,String> DownloadPDF()
        {
			KeyValuePair<Boolean, String> retorno = new KeyValuePair<Boolean, String>(true, String.Empty);
			
			LoadListaSP_NOTIF();
            if (_propostaListaSP_NOTIF == null)
                retorno = new KeyValuePair<Boolean, String>(false, String.Empty);
            if (retorno.Key)
            {
                KeyValuePair<String, Microsoft.SharePoint.Client.FileInformation> pdf = NegocioPdf.Download(_propostaListaSP_NOTIF.ObterNomeLista(), _propostaListaSP_NOTIF.ID);
                retorno = new KeyValuePair<Boolean, String>(pdf.Value != null, String.Empty);
                if (retorno.Key)
                    FormHelper.Download(pdf.Key, pdf.Value);
            }
			
            if (!retorno.Key)
                retorno = new KeyValuePair<Boolean, String>(true, "PDF não foi encontrado");

			return retorno;
        }
		
		#endregion

		#region [Métodos - Load]

		#region [Load Controles]

		protected void LoadFormControls()
        {
			FormHelper.LoadDataSource(sp_Farol, new ListaSP_NOTIF.ObterDataSourceChoiceSP(i => i.Farol));

			throw new NotImplementedException("Verificar o método e depois apagar o NotImplementedException");
			//Mudar o código abaixo com a busca correta - o nome da propriedade id pode variar
			//FormHelper.LoadDataSource(bd_ListaNOTIFNotificacoes, new ListaNOTIFNotificacoes().Consultar().ObterDataSource(c => c.Id, c => c.Descricao, true));

		}

		#region [Estrutura Comercial]

        protected void LoadEstruturaComercialControls()
        {
            #region [Proposta]

			controleIbm = CarregarUcBuscarEstruturaComercial(divBuscarEstruturaComercial_IBM);
            controleEstruturaGt = CarregarUcEstruturaIndividual(plhEstruturaGt);
            controleEstruturaGr = CarregarUcEstruturaIndividual(plhEstruturaGr);
            controleEstruturaDiretor = CarregarUcEstruturaIndividual(plhEstruturaDiretor);
            controleEstruturaCdr = CarregarUcEstruturaIndividual(plhEstruturaCdr);
            controleEstruturaGdr = CarregarUcEstruturaIndividual(plhEstruturaGdr);

            #endregion
        }

        protected void LoadFormEstruturaComercialControls()
        {
           if (_propostaListaSP_NOTIF != null)
			{
				CarregarDadosUcBuscarEstruturaComercial(controleIbm, _propostaListaSP_NOTIF.Ibm, true, !BtnVisible, String.Empty);
				//CarregarDadosUcBuscarEstruturaComercial(controleSiteCode, _propostaListaSP_NOTIF.SiteCode, false, !BtnVisible, String.Empty);
                
				DadosComercialSalesForce dadosSales = new DadosComercialSalesForce();
                dadosSales.GerenteTerritorio = FormHelper.GetLogin(_propostaListaSP_NOTIF.GerenteTerritorio);
                dadosSales.GerenteRegiao = FormHelper.GetLogin(_propostaListaSP_NOTIF.GerenteRegiao);
                dadosSales.DiretorVendas = FormHelper.GetLogin(_propostaListaSP_NOTIF.DiretorVendas);
                dadosSales.Cdr = FormHelper.GetLogin(_propostaListaSP_NOTIF.Gdr);
                dadosSales.Gdr = FormHelper.GetLogin(_propostaListaSP_NOTIF.Cdr);
                CarregarEstruturaComercial(dadosSales);
            }
            else
                CarregarEstruturaComercial();
        }

		protected void CarregarEstruturaComercial(DadosComercialSalesForce dados = null)
        {
            CarregarDadosUcEstruturaindividual(controleEstruturaGt, "GT",dados!= null && dados.GerenteTerritorio != null ? dados.GerenteTerritorio : string.Empty, rezoneamentoVisivel: true);
            CarregarDadosUcEstruturaindividual(controleEstruturaGr, "GR", dados != null && dados.GerenteRegiao != null ? dados.GerenteRegiao : string.Empty, rezoneamentoVisivel: true);
            CarregarDadosUcEstruturaindividual(controleEstruturaDiretor, "Diretor", dados != null && dados.DiretorVendas != null ? dados.DiretorVendas : string.Empty, rezoneamentoVisivel: true);
            CarregarDadosUcEstruturaindividual(controleEstruturaCdr, "CDR", dados != null && dados.Cdr != null ? dados.Cdr : string.Empty, rezoneamentoVisivel: true);
            CarregarDadosUcEstruturaindividual(controleEstruturaGdr, "GDR", dados != null && dados.Gdr != null ? dados.Gdr : string.Empty, rezoneamentoVisivel: true);
        }

        #endregion

		#endregion

		#region [Load Form]

		public void LoadPermissao()
        {
			Boolean fluxoAtivo = this.FluxoAtivo;
            Boolean permissaoEditar = this.PermissaoEditar;
            Boolean fluxoFinalizado = this.FluxoFinalizado;
            Boolean propostaEmAprovacao = this.PropostaEmAprovacao;

            BtnVisible = !fluxoFinalizado && (!propostaEmAprovacao && permissaoEditar);

            btnIniciar.Visible = BtnVisible;
            btnSalvar.Visible = BtnVisible;
            btnReiniciarFluxo.Visible = !btnIniciar.Visible && !fluxoFinalizado && permissaoEditar && !fluxoAtivo;
            btnObterPDF.Visible = fluxoFinalizado || (fluxoAtivo && permissaoEditar);
            btnAnexoPorEmail.Visible = this.CodigoItem > 0;
			
			if (btnObterPDF.Visible)
            {
                LoadListaSP_NOTIF();
                KeyValuePair<String, Microsoft.SharePoint.Client.FileInformation> pdf = NegocioPdf.Download(_propostaListaSP_NOTIF.ObterNomeLista(), _propostaListaSP_NOTIF.ID);
                if(pdf.Value != null)
                {
                    ScriptManager scriptMan = ScriptManager.GetCurrent(this.Page);
                    btnObterPDF.OnClientClick = "window.setTimeout(function() { _spFormOnSubmitCalled = false; }, 10);";
                    scriptMan.RegisterPostBackControl(btnObterPDF);
                }
            }
			
			if (!this.IsPostBack)
				SetReadOnlyOnAllControls(this, !BtnVisible);
        }

		public void LoadForm()
		{
			LoadFormControls();

			LoadListaSP_NOTIF();
            LoadFormFromListaSP_NOTIF();
			
			LoadListaNOTIF();
			LoadFormFromListaNOTIF();
		           
		}

		protected void LoadListaSP_NOTIF(Boolean defaultObject = false)
        {
            _propostaListaSP_NOTIF = _propostaListaSP_NOTIF == null && CodigoItem > 0 ? new ListaSP_NOTIF().Obter(CodigoItem) : _propostaListaSP_NOTIF;

            if (_propostaListaSP_NOTIF == null && defaultObject)
                _propostaListaSP_NOTIF = new ListaSP_NOTIF();
        }

		protected void LoadFormFromListaSP_NOTIF()
		{
			if(_propostaListaSP_NOTIF == null)
				return;
			TituloFormulario = _propostaListaSP_NOTIF != null ? _propostaListaSP_NOTIF.Titulo : TituloFormulario;

			#region [DropDownList & RadioButtonList & CheckBoxList]

			_propostaListaSP_NOTIF.SetControl(sp_Farol,_ => _.Farol);

		#endregion

		#region [CheckBox]

			_propostaListaSP_NOTIF.SetControl(sp_BuscaDocumentos,_ => _.BuscaDocumentos);
			_propostaListaSP_NOTIF.SetControl(sp_ContratoPadrao,_ => _.ContratoPadrao);
			_propostaListaSP_NOTIF.SetControl(sp_UtilizaZoneamentoCdr,_ => _.UtilizaZoneamentoCdr);
			_propostaListaSP_NOTIF.SetControl(sp_UtilizaZoneamentoDiretor,_ => _.UtilizaZoneamentoDiretor);
			_propostaListaSP_NOTIF.SetControl(sp_UtilizaZoneamentoGdr,_ => _.UtilizaZoneamentoGdr);
			_propostaListaSP_NOTIF.SetControl(sp_UtilizaZoneamentoGR,_ => _.UtilizaZoneamentoGR);
			_propostaListaSP_NOTIF.SetControl(sp_UtilizaZoneamentoGT,_ => _.UtilizaZoneamentoGT);
			_propostaListaSP_NOTIF.SetControl(sp_EnvolvimentoPlanejamento,_ => _.EnvolvimentoPlanejamento);
			_propostaListaSP_NOTIF.SetControl(sp_NotificacaoPadrao,_ => _.NotificacaoPadrao);
			_propostaListaSP_NOTIF.SetControl(sp_AprovacaoGRDV,_ => _.AprovacaoGRDV);

		#endregion

		#region [TexBox]

			_propostaListaSP_NOTIF.SetControl(sp_RazaoSocial,_ => _.RazaoSocial);
			_propostaListaSP_NOTIF.SetControl(sp_EstadoAtualFluxo,_ => _.EstadoAtualFluxo);
			_propostaListaSP_NOTIF.SetControl(sp_Etapa,_ => _.Etapa);
			_propostaListaSP_NOTIF.SetControl(sp_TipoNotificacao,_ => _.TipoNotificacao);
			_propostaListaSP_NOTIF.SetControl(sp_StatusLoja,_ => _.StatusLoja);
			_propostaListaSP_NOTIF.SetControl(sp_Consumo,_ => _.Consumo);

		#endregion

		#region [Number]


		#endregion

		#region [Data]

			_propostaListaSP_NOTIF.SetControl(sp_DataNotificacao,_ => _.DataNotificacao);

		#endregion

		#region [PeoplePicker]


		#endregion

		}

		protected void LoadListaSP_NOTIFFromForm()
		{
		#region [DropDownList & RadioButtonList]


	#endregion

	#region [CheckBoxList]

	_propostaListaSP_NOTIF.LoadProperty(sp_Farol,_ => _.Farol);

	#endregion

	#region [CheckBox]

	_propostaListaSP_NOTIF.LoadProperty(sp_BuscaDocumentos,_ => _.BuscaDocumentos);
	_propostaListaSP_NOTIF.LoadProperty(sp_ContratoPadrao,_ => _.ContratoPadrao);
	_propostaListaSP_NOTIF.LoadProperty(sp_UtilizaZoneamentoCdr,_ => _.UtilizaZoneamentoCdr);
	_propostaListaSP_NOTIF.LoadProperty(sp_UtilizaZoneamentoDiretor,_ => _.UtilizaZoneamentoDiretor);
	_propostaListaSP_NOTIF.LoadProperty(sp_UtilizaZoneamentoGdr,_ => _.UtilizaZoneamentoGdr);
	_propostaListaSP_NOTIF.LoadProperty(sp_UtilizaZoneamentoGR,_ => _.UtilizaZoneamentoGR);
	_propostaListaSP_NOTIF.LoadProperty(sp_UtilizaZoneamentoGT,_ => _.UtilizaZoneamentoGT);
	_propostaListaSP_NOTIF.LoadProperty(sp_EnvolvimentoPlanejamento,_ => _.EnvolvimentoPlanejamento);
	_propostaListaSP_NOTIF.LoadProperty(sp_NotificacaoPadrao,_ => _.NotificacaoPadrao);
	_propostaListaSP_NOTIF.LoadProperty(sp_AprovacaoGRDV,_ => _.AprovacaoGRDV);

	#endregion

	#region [TexBox]

	_propostaListaSP_NOTIF.LoadProperty(sp_RazaoSocial,_ => _.RazaoSocial);
	_propostaListaSP_NOTIF.LoadProperty(sp_EstadoAtualFluxo,_ => _.EstadoAtualFluxo);
	_propostaListaSP_NOTIF.LoadProperty(sp_Etapa,_ => _.Etapa);
	_propostaListaSP_NOTIF.LoadProperty(sp_TipoNotificacao,_ => _.TipoNotificacao);
	_propostaListaSP_NOTIF.LoadProperty(sp_StatusLoja,_ => _.StatusLoja);
	_propostaListaSP_NOTIF.LoadProperty(sp_Consumo,_ => _.Consumo);

	#endregion

	#region [Number]


	#endregion

	#region [Data]

	_propostaListaSP_NOTIF.LoadProperty(sp_DataNotificacao,_ => _.DataNotificacao);

	#endregion

	#region [PeoplePicker]


	#endregion


			#region [DadosControle]

			ControleBuscarDadosComercial wControleBuscarDadosComercial = new ControleBuscarDadosComercial(controleIbm);
			ControleEstruturaIndividual wControleEstruturaGt = new ControleEstruturaIndividual(controleEstruturaGt);
			ControleEstruturaIndividual wControleEstruturaGr = new ControleEstruturaIndividual(controleEstruturaGr);
			ControleEstruturaIndividual wControleEstruturaDiretor = new ControleEstruturaIndividual(controleEstruturaDiretor);
			ControleEstruturaIndividual wControleEstruturaCdr = new ControleEstruturaIndividual(controleEstruturaCdr);
			ControleEstruturaIndividual wControleEstruturaGdr = new ControleEstruturaIndividual(controleEstruturaGdr);

			_propostaListaSP_NOTIF.GerenteTerritorio = (Usuario)FormHelper.GetPeoplePickerValue(wControleEstruturaGt.ObterResponsavelNivel());
			_propostaListaSP_NOTIF.GerenteRegiao = (Usuario)FormHelper.GetPeoplePickerValue(wControleEstruturaGr.ObterResponsavelNivel());
			_propostaListaSP_NOTIF.DiretorVendas = (Usuario)FormHelper.GetPeoplePickerValue(wControleEstruturaDiretor.ObterResponsavelNivel());
			_propostaListaSP_NOTIF.Cdr = (Usuario)FormHelper.GetPeoplePickerValue(wControleEstruturaCdr.ObterResponsavelNivel());
			_propostaListaSP_NOTIF.Gdr = (Usuario)FormHelper.GetPeoplePickerValue(wControleEstruturaGdr.ObterResponsavelNivel());

			_propostaListaSP_NOTIF.UtilizaZoneamentoGT = wControleEstruturaGt.UtilizaRezoneamento();
			_propostaListaSP_NOTIF.UtilizaZoneamentoGR = wControleEstruturaGr.UtilizaRezoneamento();
			_propostaListaSP_NOTIF.UtilizaZoneamentoDiretor = wControleEstruturaDiretor.UtilizaRezoneamento();
			_propostaListaSP_NOTIF.UtilizaZoneamentoCdr = wControleEstruturaCdr.UtilizaRezoneamento();
			_propostaListaSP_NOTIF.UtilizaZoneamentoGdr = wControleEstruturaGdr.UtilizaRezoneamento();
			_propostaListaSP_NOTIF.UtilizaZoneamentoPadrao = _propostaListaSP_NOTIF.UtilizaZoneamentoGT && _propostaListaSP_NOTIF.UtilizaZoneamentoGR && _propostaListaSP_NOTIF.UtilizaZoneamentoDiretor
				&& _propostaListaSP_NOTIF.UtilizaZoneamentoCdr && _propostaListaSP_NOTIF.UtilizaZoneamentoGdr;

            
			_propostaListaSP_NOTIF.Ibm = FormHelper.GetIntValue(wControleBuscarDadosComercial.ObterIbm());


			#endregion 

		}		
		
			
		protected void LoadListaNOTIF(Boolean defaultObject = false)
		{
			throw new NotImplementedException("Verificar o método e depois apagar o NotImplementedException");
			//Mudar o código abaixo com a busca correta - o nome da propriedade id pode variar

			//_propostaListaNOTIF = _propostaListaNOTIF == null && CodigoItem > 0 ? new ListaNOTIF().Obter(CodigoItem) : _propostaListaNOTIF;
			//if (_propostaListaNOTIF == null && defaultObject)
			//_propostaListaNOTIF = new ListaNOTIF();
		}

		protected void LoadFormFromListaNOTIF()
		{
			if(_propostaListaNOTIF == null)
				return;
		
				#region [DropDownList]

			//apontar para o id
			//_propostaListaNOTIF.SetControl(bd_ListaNOTIFNotificacoes,_ => _.ListaNOTIFNotificacoes);

		#endregion

		#region [CheckBox]

			_propostaListaNOTIF.SetControl(bd_Ativo,_ => _.Ativo);
			_propostaListaNOTIF.SetControl(bd_BuscaDocumentos,_ => _.BuscaDocumentos);
			_propostaListaNOTIF.SetControl(bd_ContratoPadrao,_ => _.ContratoPadrao);
			_propostaListaNOTIF.SetControl(bd_UtilizaZoneamentoPadrao,_ => _.UtilizaZoneamentoPadrao);
			_propostaListaNOTIF.SetControl(bd_UtilizaZoneamentoCdr,_ => _.UtilizaZoneamentoCdr);
			_propostaListaNOTIF.SetControl(bd_UtilizaZoneamentoDiretor,_ => _.UtilizaZoneamentoDiretor);
			_propostaListaNOTIF.SetControl(bd_UtilizaZoneamentoGdr,_ => _.UtilizaZoneamentoGdr);
			_propostaListaNOTIF.SetControl(bd_UtilizaZoneamentoGR,_ => _.UtilizaZoneamentoGR);
			_propostaListaNOTIF.SetControl(bd_UtilizaZoneamentoGT,_ => _.UtilizaZoneamentoGT);
			_propostaListaNOTIF.SetControl(bd_EnvolvimentoPlanejamento,_ => _.EnvolvimentoPlanejamento);
			_propostaListaNOTIF.SetControl(bd_AprovacaoGRDV,_ => _.AprovacaoGRDV);
			_propostaListaNOTIF.SetControl(bd_NotificacaoPadrao,_ => _.NotificacaoPadrao);

		#endregion

		#region [TexBox]

			_propostaListaNOTIF.SetControl(bd_CodigoLista,_ => _.CodigoLista);
			_propostaListaNOTIF.SetControl(bd_LoginInclusao,_ => _.LoginInclusao);
			_propostaListaNOTIF.SetControl(bd_LoginAlteracao,_ => _.LoginAlteracao);
			_propostaListaNOTIF.SetControl(bd_TituloProposta,_ => _.TituloProposta);
			_propostaListaNOTIF.SetControl(bd_DescricaoRazaoSocial,_ => _.DescricaoRazaoSocial);
			_propostaListaNOTIF.SetControl(bd_DescricaoEstadoAtualFluxo,_ => _.DescricaoEstadoAtualFluxo);
			_propostaListaNOTIF.SetControl(bd_DescricaoEtapa,_ => _.DescricaoEtapa);
			_propostaListaNOTIF.SetControl(bd_LoginGerenteTerritorio,_ => _.LoginGerenteTerritorio);
			_propostaListaNOTIF.SetControl(bd_LoginGerenteRegiao,_ => _.LoginGerenteRegiao);
			_propostaListaNOTIF.SetControl(bd_LoginDiretorVendas,_ => _.LoginDiretorVendas);
			_propostaListaNOTIF.SetControl(bd_LoginCDR,_ => _.LoginCDR);
			_propostaListaNOTIF.SetControl(bd_LoginGDR,_ => _.LoginGDR);
			_propostaListaNOTIF.SetControl(bd_Farol,_ => _.Farol);
			_propostaListaNOTIF.SetControl(bd_CNPJ,_ => _.CNPJ);
			_propostaListaNOTIF.SetControl(bd_Endereco,_ => _.Endereco);
			_propostaListaNOTIF.SetControl(bd_Bairro,_ => _.Bairro);
			_propostaListaNOTIF.SetControl(bd_Cep,_ => _.Cep);
			_propostaListaNOTIF.SetControl(bd_UF,_ => _.UF);
			_propostaListaNOTIF.SetControl(bd_Cidade,_ => _.Cidade);
			_propostaListaNOTIF.SetControl(bd_NomeContrato,_ => _.NomeContrato);
			_propostaListaNOTIF.SetControl(bd_NumeroContrato,_ => _.NumeroContrato);
			_propostaListaNOTIF.SetControl(bd_OutroTipoNotificacao,_ => _.OutroTipoNotificacao);
			_propostaListaNOTIF.SetControl(bd_StatusLoja,_ => _.StatusLoja);
			_propostaListaNOTIF.SetControl(bd_Comentario,_ => _.Comentario);
			_propostaListaNOTIF.SetControl(bd_Juridico_Observacao,_ => _.Juridico_Observacao);
			_propostaListaNOTIF.SetControl(bd_RelacoesSetoriais_FaseDenuncia,_ => _.RelacoesSetoriais_FaseDenuncia);
			_propostaListaNOTIF.SetControl(bd_RelacoesSetoriais_OrgaoDenuncia,_ => _.RelacoesSetoriais_OrgaoDenuncia);
			_propostaListaNOTIF.SetControl(bd_RelacoesSetoriais_Observacao,_ => _.RelacoesSetoriais_Observacao);

		#endregion

		#region [Number]

			_propostaListaNOTIF.SetControl(bd_CodigoItem,_ => _.CodigoItem);
			_propostaListaNOTIF.SetControl(bd_NumeroIBM,_ => _.NumeroIBM);
			_propostaListaNOTIF.SetControl(bd_NumeroSiteCode,_ => _.NumeroSiteCode);
			_propostaListaNOTIF.SetControl(bd_Mercado,_ => _.Mercado);
			_propostaListaNOTIF.SetControl(bd_TipoNotificacao,_ => _.TipoNotificacao);
			_propostaListaNOTIF.SetControl(bd_Consumo,_ => _.Consumo);
			_propostaListaNOTIF.SetControl(bd_Juridico_FasesJudicializacao,_ => _.Juridico_FasesJudicializacao);
			_propostaListaNOTIF.SetControl(bd_Juridico_TipoAcaoJudicial,_ => _.Juridico_TipoAcaoJudicial);
			_propostaListaNOTIF.SetControl(bd_TotalRecordCount,_ => _.TotalRecordCount);

		#endregion

		#region [Data]

			_propostaListaNOTIF.SetControl(bd_DataInclusao,_ => _.DataInclusao);
			_propostaListaNOTIF.SetControl(bd_DataAlteracao,_ => _.DataAlteracao);
			_propostaListaNOTIF.SetControl(bd_DataNotificacao,_ => _.DataNotificacao);
			_propostaListaNOTIF.SetControl(bd_Juridico_DataAcao,_ => _.Juridico_DataAcao);
			_propostaListaNOTIF.SetControl(bd_RelacoesSetoriais_Data,_ => _.RelacoesSetoriais_Data);

		#endregion


		}

		protected void LoadListaNOTIFFromForm()
		{
			if(_propostaListaNOTIF == null)
				return;

				#region [CheckBox]

	_propostaListaNOTIF.LoadProperty(bd_Ativo,_ => _.Ativo);
	_propostaListaNOTIF.LoadProperty(bd_BuscaDocumentos,_ => _.BuscaDocumentos);
	_propostaListaNOTIF.LoadProperty(bd_ContratoPadrao,_ => _.ContratoPadrao);
	_propostaListaNOTIF.LoadProperty(bd_UtilizaZoneamentoPadrao,_ => _.UtilizaZoneamentoPadrao);
	_propostaListaNOTIF.LoadProperty(bd_UtilizaZoneamentoCdr,_ => _.UtilizaZoneamentoCdr);
	_propostaListaNOTIF.LoadProperty(bd_UtilizaZoneamentoDiretor,_ => _.UtilizaZoneamentoDiretor);
	_propostaListaNOTIF.LoadProperty(bd_UtilizaZoneamentoGdr,_ => _.UtilizaZoneamentoGdr);
	_propostaListaNOTIF.LoadProperty(bd_UtilizaZoneamentoGR,_ => _.UtilizaZoneamentoGR);
	_propostaListaNOTIF.LoadProperty(bd_UtilizaZoneamentoGT,_ => _.UtilizaZoneamentoGT);
	_propostaListaNOTIF.LoadProperty(bd_EnvolvimentoPlanejamento,_ => _.EnvolvimentoPlanejamento);
	_propostaListaNOTIF.LoadProperty(bd_AprovacaoGRDV,_ => _.AprovacaoGRDV);
	_propostaListaNOTIF.LoadProperty(bd_NotificacaoPadrao,_ => _.NotificacaoPadrao);

	#endregion

	#region [TexBox]

	_propostaListaNOTIF.LoadProperty(bd_CodigoLista,_ => _.CodigoLista);
	_propostaListaNOTIF.LoadProperty(bd_LoginInclusao,_ => _.LoginInclusao);
	_propostaListaNOTIF.LoadProperty(bd_LoginAlteracao,_ => _.LoginAlteracao);
	_propostaListaNOTIF.LoadProperty(bd_TituloProposta,_ => _.TituloProposta);
	_propostaListaNOTIF.LoadProperty(bd_DescricaoRazaoSocial,_ => _.DescricaoRazaoSocial);
	_propostaListaNOTIF.LoadProperty(bd_DescricaoEstadoAtualFluxo,_ => _.DescricaoEstadoAtualFluxo);
	_propostaListaNOTIF.LoadProperty(bd_DescricaoEtapa,_ => _.DescricaoEtapa);
	_propostaListaNOTIF.LoadProperty(bd_LoginGerenteTerritorio,_ => _.LoginGerenteTerritorio);
	_propostaListaNOTIF.LoadProperty(bd_LoginGerenteRegiao,_ => _.LoginGerenteRegiao);
	_propostaListaNOTIF.LoadProperty(bd_LoginDiretorVendas,_ => _.LoginDiretorVendas);
	_propostaListaNOTIF.LoadProperty(bd_LoginCDR,_ => _.LoginCDR);
	_propostaListaNOTIF.LoadProperty(bd_LoginGDR,_ => _.LoginGDR);
	_propostaListaNOTIF.LoadProperty(bd_Farol,_ => _.Farol);
	_propostaListaNOTIF.LoadProperty(bd_CNPJ,_ => _.CNPJ);
	_propostaListaNOTIF.LoadProperty(bd_Endereco,_ => _.Endereco);
	_propostaListaNOTIF.LoadProperty(bd_Bairro,_ => _.Bairro);
	_propostaListaNOTIF.LoadProperty(bd_Cep,_ => _.Cep);
	_propostaListaNOTIF.LoadProperty(bd_UF,_ => _.UF);
	_propostaListaNOTIF.LoadProperty(bd_Cidade,_ => _.Cidade);
	_propostaListaNOTIF.LoadProperty(bd_NomeContrato,_ => _.NomeContrato);
	_propostaListaNOTIF.LoadProperty(bd_NumeroContrato,_ => _.NumeroContrato);
	_propostaListaNOTIF.LoadProperty(bd_OutroTipoNotificacao,_ => _.OutroTipoNotificacao);
	_propostaListaNOTIF.LoadProperty(bd_StatusLoja,_ => _.StatusLoja);
	_propostaListaNOTIF.LoadProperty(bd_Comentario,_ => _.Comentario);
	_propostaListaNOTIF.LoadProperty(bd_Juridico_Observacao,_ => _.Juridico_Observacao);
	_propostaListaNOTIF.LoadProperty(bd_RelacoesSetoriais_FaseDenuncia,_ => _.RelacoesSetoriais_FaseDenuncia);
	_propostaListaNOTIF.LoadProperty(bd_RelacoesSetoriais_OrgaoDenuncia,_ => _.RelacoesSetoriais_OrgaoDenuncia);
	_propostaListaNOTIF.LoadProperty(bd_RelacoesSetoriais_Observacao,_ => _.RelacoesSetoriais_Observacao);

	#endregion

	#region [Number]

	_propostaListaNOTIF.LoadProperty(bd_CodigoItem,_ => _.CodigoItem);
	_propostaListaNOTIF.LoadProperty(bd_NumeroIBM,_ => _.NumeroIBM);
	_propostaListaNOTIF.LoadProperty(bd_NumeroSiteCode,_ => _.NumeroSiteCode);
	_propostaListaNOTIF.LoadProperty(bd_Mercado,_ => _.Mercado);
	_propostaListaNOTIF.LoadProperty(bd_TipoNotificacao,_ => _.TipoNotificacao);
	_propostaListaNOTIF.LoadProperty(bd_Consumo,_ => _.Consumo);
	_propostaListaNOTIF.LoadProperty(bd_Juridico_FasesJudicializacao,_ => _.Juridico_FasesJudicializacao);
	_propostaListaNOTIF.LoadProperty(bd_Juridico_TipoAcaoJudicial,_ => _.Juridico_TipoAcaoJudicial);
	_propostaListaNOTIF.LoadProperty(bd_TotalRecordCount,_ => _.TotalRecordCount);

	#endregion

	#region [Data]

	_propostaListaNOTIF.LoadProperty(bd_DataInclusao,_ => _.DataInclusao);
	_propostaListaNOTIF.LoadProperty(bd_DataAlteracao,_ => _.DataAlteracao);
	_propostaListaNOTIF.LoadProperty(bd_DataNotificacao,_ => _.DataNotificacao);
	_propostaListaNOTIF.LoadProperty(bd_Juridico_DataAcao,_ => _.Juridico_DataAcao);
	_propostaListaNOTIF.LoadProperty(bd_RelacoesSetoriais_Data,_ => _.RelacoesSetoriais_Data);

	#endregion


		}
		
		#endregion
		
		#endregion

		#region [Métodos - Salvar]

		protected void SalvarListaSP_NOTIF()
		{
			if (CodigoItem > 0)
				_propostaListaSP_NOTIF.Atualizar();
			else
			{
				_propostaListaSP_NOTIF.Inserir();
				CodigoItem = _propostaListaSP_NOTIF.ID;
			}

			//String nomeSolicitacao = String.Format("[Comodato] – {0} – {1} ({2}) – {3}", _propostaListaSP_NOTIF.TipoAcaoComodato.TipoAcao, _propostaListaSP_NOTIF.RazaoSocial, _propostaListaSP_NOTIF.Ibm.ToString(), _propostaListaSP_NOTIF.ID);
			//nomeSolicitacao = nomeSolicitacao.Length <= 255 ? nomeSolicitacao :
			//    String.Format("[Comodato] – {0} – {1} ({2}) – {3}", _propostaListaSP_NOTIF.TipoAcaoComodato.TipoAcao, _propostaListaSP_NOTIF.RazaoSocial.Substring(0, _propostaListaSP_NOTIF.RazaoSocial.Length > nomeSolicitacao.Length - 255 ? nomeSolicitacao.Length - 255 : nomeSolicitacao.Length), _propostaListaSP_NOTIF.Ibm.ToString(), _propostaListaSP_NOTIF.ID);
			//
			//if (_propostaListaSP_NOTIF.Titulo != nomeSolicitacao)
			//{
			//    _propostaListaSP_NOTIF.Titulo = nomeSolicitacao;
			//    _propostaListaSP_NOTIF.Atualizar();
			//}	
		}

		
		protected void SalvarListaNOTIF()
		{
			throw new NotImplementedException("Verificar o método e depois apagar o NotImplementedException");
			//Mudar o código abaixo com a busca correta - o nome da propriedade id pode variar
		
			//if(_propostaListaNOTIF == null)
				//return;
		
			//if(_propostaListaNOTIF.Id > 0)
					//_propostaListaNOTIF.Atualizar();
			//else
			{
				//_propostaListaNOTIF.Id = inserir o id correto;
				//_propostaListaNOTIF.Inserir();
			}
		}
		
		#endregion

		#region [Métodos - Auxiliares]
				

        #endregion

		#region [Controles - Core]

		#region [User Control Estrutura Comercial - Interface]

		//Método chamado pelos controles - Core
		public void CarregarDadosComercial(Control control, String dadosComercial)
		{
			EventoTratado(CarregarDadosComercialLocal,false, control, dadosComercial);
		}

		//Método chamado pelos controles - Core
		public void MudarZoneamentoPadrao(Control control, Boolean habilitado)
		{
			ControleBuscarDadosComercial wControleBuscarEstruturaComercial = new ControleBuscarDadosComercial(controleIbm);
			wControleBuscarEstruturaComercial.ChamadaWebServiceHabilitada(true);//Recarrega sempre.
			if (habilitado)
				wControleBuscarEstruturaComercial.RecarregarEstruturaComercial();

			if (control == controleEstruturaGt)
				new ControleEstruturaIndividual(controleEstruturaGt).ControlesHabilitados(habilitado);
			else if (control == controleEstruturaGr)
				new ControleEstruturaIndividual(controleEstruturaGr).ControlesHabilitados(habilitado);
			else if (control == controleEstruturaCdr)
				new ControleEstruturaIndividual(controleEstruturaCdr).ControlesHabilitados(habilitado);
			else if (control == controleEstruturaDiretor)
				new ControleEstruturaIndividual(controleEstruturaDiretor).ControlesHabilitados(habilitado);
			else if (control == controleEstruturaGdr)
				new ControleEstruturaIndividual(controleEstruturaGdr).ControlesHabilitados(habilitado);
		}

		protected KeyValuePair<Boolean, String> CarregarDadosComercialLocal(object _control, object _dadosComercial)
        {
            KeyValuePair<Boolean, String> retorno = new KeyValuePair<Boolean, String>(true, String.Empty);
            Control control = (Control)_control;
            String dadosComercial = (String)_dadosComercial;

            CarregarEstruturaComercial();
            DadosComercialSalesForce dados = Serializacao.DeserializeFromJson<DadosComercialSalesForce>(dadosComercial);

            if (dados == null || dados.Ibm == null || dados.SiteCode == null)
				retorno = new KeyValuePair<bool, string>(false, "Número do IBM ou Site Code não encontrado");

            if (retorno.Key)
                CarregarEstruturaComercial(dados);

            return retorno;
        }
		
		#endregion

		#region [User Control Menu- Interface]

		public List<KeyValuePair<String, String>> ObterConfiguracaoMenu()
		{
			return _listaConfiguracaoMenu;
		}

		public String ObterMenuAtivo()
		{
			return _idMenuAtivo;
		}

		public Boolean ExibirMenuTarefa()
		{
			return _exibirMenuTarefa;
		}
		
		public String ObterTituloFormulario()
		{
			return TituloFormulario;
		}
		
		#endregion
	
		#endregion

	}
}